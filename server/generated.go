// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type PageOrderBy string

const (
	PageOrderByCreated PageOrderBy = "CREATED"
	PageOrderById      PageOrderBy = "ID"
	PageOrderByPath    PageOrderBy = "PATH"
	PageOrderByTitle   PageOrderBy = "TITLE"
	PageOrderByUpdated PageOrderBy = "UPDATED"
)

// __listPagesInput is used internally by genqlient
type __listPagesInput struct {
	OrderBy PageOrderBy `json:"orderBy"`
}

// GetOrderBy returns __listPagesInput.OrderBy, and is useful for accessing the field via an interface.
func (v *__listPagesInput) GetOrderBy() PageOrderBy { return v.OrderBy }

// __singlePageInput is used internally by genqlient
type __singlePageInput struct {
	Id int `json:"id"`
}

// GetId returns __singlePageInput.Id, and is useful for accessing the field via an interface.
func (v *__singlePageInput) GetId() int { return v.Id }

// listPagesPagesPageQuery includes the requested fields of the GraphQL type PageQuery.
type listPagesPagesPageQuery struct {
	List []listPagesPagesPageQueryListPageListItem `json:"list"`
}

// GetList returns listPagesPagesPageQuery.List, and is useful for accessing the field via an interface.
func (v *listPagesPagesPageQuery) GetList() []listPagesPagesPageQueryListPageListItem { return v.List }

// listPagesPagesPageQueryListPageListItem includes the requested fields of the GraphQL type PageListItem.
type listPagesPagesPageQueryListPageListItem struct {
	Id    int    `json:"id"`
	Title string `json:"title"`
}

// GetId returns listPagesPagesPageQueryListPageListItem.Id, and is useful for accessing the field via an interface.
func (v *listPagesPagesPageQueryListPageListItem) GetId() int { return v.Id }

// GetTitle returns listPagesPagesPageQueryListPageListItem.Title, and is useful for accessing the field via an interface.
func (v *listPagesPagesPageQueryListPageListItem) GetTitle() string { return v.Title }

// listPagesResponse is returned by listPages on success.
type listPagesResponse struct {
	Pages listPagesPagesPageQuery `json:"pages"`
}

// GetPages returns listPagesResponse.Pages, and is useful for accessing the field via an interface.
func (v *listPagesResponse) GetPages() listPagesPagesPageQuery { return v.Pages }

// listUsersResponse is returned by listUsers on success.
type listUsersResponse struct {
	Users listUsersUsersUserQuery `json:"users"`
}

// GetUsers returns listUsersResponse.Users, and is useful for accessing the field via an interface.
func (v *listUsersResponse) GetUsers() listUsersUsersUserQuery { return v.Users }

// listUsersUsersUserQuery includes the requested fields of the GraphQL type UserQuery.
type listUsersUsersUserQuery struct {
	List []listUsersUsersUserQueryListUserMinimal `json:"list"`
}

// GetList returns listUsersUsersUserQuery.List, and is useful for accessing the field via an interface.
func (v *listUsersUsersUserQuery) GetList() []listUsersUsersUserQueryListUserMinimal { return v.List }

// listUsersUsersUserQueryListUserMinimal includes the requested fields of the GraphQL type UserMinimal.
type listUsersUsersUserQueryListUserMinimal struct {
	Id    int    `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

// GetId returns listUsersUsersUserQueryListUserMinimal.Id, and is useful for accessing the field via an interface.
func (v *listUsersUsersUserQueryListUserMinimal) GetId() int { return v.Id }

// GetName returns listUsersUsersUserQueryListUserMinimal.Name, and is useful for accessing the field via an interface.
func (v *listUsersUsersUserQueryListUserMinimal) GetName() string { return v.Name }

// GetEmail returns listUsersUsersUserQueryListUserMinimal.Email, and is useful for accessing the field via an interface.
func (v *listUsersUsersUserQueryListUserMinimal) GetEmail() string { return v.Email }

// singlePagePagesPageQuery includes the requested fields of the GraphQL type PageQuery.
type singlePagePagesPageQuery struct {
	Single singlePagePagesPageQuerySinglePage `json:"single"`
}

// GetSingle returns singlePagePagesPageQuery.Single, and is useful for accessing the field via an interface.
func (v *singlePagePagesPageQuery) GetSingle() singlePagePagesPageQuerySinglePage { return v.Single }

// singlePagePagesPageQuerySinglePage includes the requested fields of the GraphQL type Page.
type singlePagePagesPageQuerySinglePage struct {
	Id          int                                             `json:"id"`
	Title       string                                          `json:"title"`
	ContentType string                                          `json:"contentType"`
	Tags        []singlePagePagesPageQuerySinglePageTagsPageTag `json:"tags"`
	Content     string                                          `json:"content"`
}

// GetId returns singlePagePagesPageQuerySinglePage.Id, and is useful for accessing the field via an interface.
func (v *singlePagePagesPageQuerySinglePage) GetId() int { return v.Id }

// GetTitle returns singlePagePagesPageQuerySinglePage.Title, and is useful for accessing the field via an interface.
func (v *singlePagePagesPageQuerySinglePage) GetTitle() string { return v.Title }

// GetContentType returns singlePagePagesPageQuerySinglePage.ContentType, and is useful for accessing the field via an interface.
func (v *singlePagePagesPageQuerySinglePage) GetContentType() string { return v.ContentType }

// GetTags returns singlePagePagesPageQuerySinglePage.Tags, and is useful for accessing the field via an interface.
func (v *singlePagePagesPageQuerySinglePage) GetTags() []singlePagePagesPageQuerySinglePageTagsPageTag {
	return v.Tags
}

// GetContent returns singlePagePagesPageQuerySinglePage.Content, and is useful for accessing the field via an interface.
func (v *singlePagePagesPageQuerySinglePage) GetContent() string { return v.Content }

// singlePagePagesPageQuerySinglePageTagsPageTag includes the requested fields of the GraphQL type PageTag.
type singlePagePagesPageQuerySinglePageTagsPageTag struct {
	Id  int    `json:"id"`
	Tag string `json:"tag"`
}

// GetId returns singlePagePagesPageQuerySinglePageTagsPageTag.Id, and is useful for accessing the field via an interface.
func (v *singlePagePagesPageQuerySinglePageTagsPageTag) GetId() int { return v.Id }

// GetTag returns singlePagePagesPageQuerySinglePageTagsPageTag.Tag, and is useful for accessing the field via an interface.
func (v *singlePagePagesPageQuerySinglePageTagsPageTag) GetTag() string { return v.Tag }

// singlePageResponse is returned by singlePage on success.
type singlePageResponse struct {
	Pages singlePagePagesPageQuery `json:"pages"`
}

// GetPages returns singlePageResponse.Pages, and is useful for accessing the field via an interface.
func (v *singlePageResponse) GetPages() singlePagePagesPageQuery { return v.Pages }

// The query or mutation executed by listPages.
const listPages_Operation = `
query listPages ($orderBy: PageOrderBy) {
	pages {
		list(orderBy: $orderBy) {
			id
			title
		}
	}
}
`

func listPages(
	ctx context.Context,
	client graphql.Client,
	orderBy PageOrderBy,
) (*listPagesResponse, error) {
	req := &graphql.Request{
		OpName: "listPages",
		Query:  listPages_Operation,
		Variables: &__listPagesInput{
			OrderBy: orderBy,
		},
	}
	var err error

	var data listPagesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listUsers.
const listUsers_Operation = `
query listUsers {
	users {
		list {
			id
			name
			email
		}
	}
}
`

func listUsers(
	ctx context.Context,
	client graphql.Client,
) (*listUsersResponse, error) {
	req := &graphql.Request{
		OpName: "listUsers",
		Query:  listUsers_Operation,
	}
	var err error

	var data listUsersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by singlePage.
const singlePage_Operation = `
query singlePage ($id: Int!) {
	pages {
		single(id: $id) {
			id
			title
			contentType
			tags {
				id
				tag
			}
			content
		}
	}
}
`

func singlePage(
	ctx context.Context,
	client graphql.Client,
	id int,
) (*singlePageResponse, error) {
	req := &graphql.Request{
		OpName: "singlePage",
		Query:  singlePage_Operation,
		Variables: &__singlePageInput{
			Id: id,
		},
	}
	var err error

	var data singlePageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
